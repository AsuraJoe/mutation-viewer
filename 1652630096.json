{"config": {"Build Date": "17 Mar 2022", "Commit": "ac98382", "LLVM Version": "12.0.0", "Mull Version": "0.17.1", "URL": "https://github.com/mull-project/mull"}, "files": {"/home/tpugh_/sunday/beginners-C-program-examples/BinarySearch.c": {"language": "cpp", "mutants": [{"id": "cxx_sub_to_add", "location": {"end": {"column": 56, "line": 20}, "start": {"column": 55, "line": 20}}, "mutatorName": "Replaced - with +", "replacement": "+", "status": "Killed"}, {"id": "cxx_sub_to_add", "location": {"end": {"column": 57, "line": 22}, "start": {"column": 56, "line": 22}}, "mutatorName": "Replaced - with +", "replacement": "+", "status": "Survived"}, {"id": "cxx_ge_to_gt", "location": {"end": {"column": 13, "line": 28}, "start": {"column": 11, "line": 28}}, "mutatorName": "Replaced >= with >", "replacement": ">", "status": "Killed"}, {"id": "cxx_ge_to_lt", "location": {"end": {"column": 13, "line": 28}, "start": {"column": 11, "line": 28}}, "mutatorName": "Replaced >= with <", "replacement": "<", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 25, "line": 29}, "start": {"column": 23, "line": 29}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_div_to_mul", "location": {"end": {"column": 23, "line": 32}, "start": {"column": 22, "line": 32}}, "mutatorName": "Replaced / with *", "replacement": "*", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 14, "line": 37}, "start": {"column": 12, "line": 37}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Killed"}, {"id": "cxx_gt_to_ge", "location": {"end": {"column": 20, "line": 39}, "start": {"column": 19, "line": 39}}, "mutatorName": "Replaced > with >=", "replacement": ">=", "status": "Survived"}, {"id": "cxx_gt_to_le", "location": {"end": {"column": 20, "line": 39}, "start": {"column": 19, "line": 39}}, "mutatorName": "Replaced > with <=", "replacement": "<=", "status": "Killed"}], "source": "#include <stdio.h>\n\n/* If x in into array return 0, else 1 */\n/* \n * A function with 4 params:\n * int[] = array of elements\n * int = wanted number\n * int = start index\n * int = end index\n *\n * returns 0 or 1\n */\nint binarySearch(int[], int, int, int);\n\nint main() {\n\tint arr[] = {5, 15, 24, 32, 56, 89};\n    /* check length of array */\n\tint size_of_array = sizeof(arr) / sizeof(int);\n\t/* Check if 24 is into arr */\n\tprintf(\"%d\\n\", binarySearch(arr, 24, 0, size_of_array-1));\n\t/* Check if 118 is into arr */\n\tprintf(\"%d\\n\", binarySearch(arr, 118, 0, size_of_array-1));\n\treturn 0;\n}\n\nint binarySearch(int array[], int number, int start, int end) {\n    /* if start index is get end index, check if that element is equals wanter nmber */\n\tif(start >= end) {\n\t\treturn array[start] == number ? 0 : 1;\n\t}\n\n\tint tmp = (int) end / 2;\n    /* divide array length in half */\n    /* if number is greater than element in half, do search by start to tmp\n\t * else search by tmp to end\n     */\n\tif(number == array[tmp]) {\n\t\treturn 0;\n\t} else if(number > array[tmp]) {\n\t\treturn binarySearch(array, number, start, tmp);\n\t} else {\n\t\treturn binarySearch(array, number, tmp, end);\n\t}\n}\n\n\n"}}, "framework": {"brandingInformation": {"homepageUrl": "https://github.com/mull-project/mull"}, "name": "Mull", "version": "0.17.1, LLVM 12.0.0"}, "mutationScore": 44, "schemaVersion": "1.7", "thresholds": {"high": 80, "low": 60}}