{"config": {"Build Date": "17 Mar 2022", "Commit": "ac98382", "LLVM Version": "12.0.0", "Mull Version": "0.17.1", "URL": "https://github.com/mull-project/mull"}, "files": {"/home/tpugh_/online_c/cycle.c": {"language": "cpp", "mutants": [{"id": "cxx_lt_to_ge", "location": {"end": {"column": 36, "line": 15}, "start": {"column": 35, "line": 15}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Survived"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 36, "line": 15}, "start": {"column": 35, "line": 15}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Survived"}, {"id": "cxx_sub_to_add", "location": {"end": {"column": 44, "line": 15}, "start": {"column": 43, "line": 15}}, "mutatorName": "Replaced - with +", "replacement": "+", "status": "Survived"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 60, "line": 15}, "start": {"column": 48, "line": 15}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Survived"}, {"id": "cxx_add_to_sub", "location": {"end": {"column": 26, "line": 22}, "start": {"column": 25, "line": 22}}, "mutatorName": "Replaced + with -", "replacement": "-", "status": "Killed"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 33, "line": 22}, "start": {"column": 32, "line": 22}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Survived"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 33, "line": 22}, "start": {"column": 32, "line": 22}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Killed"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 44, "line": 22}, "start": {"column": 41, "line": 22}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Killed"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 20, "line": 24}, "start": {"column": 19, "line": 24}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Killed"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 20, "line": 24}, "start": {"column": 19, "line": 24}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Killed"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 14, "line": 26}, "start": {"column": 9, "line": 26}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 15, "line": 31}, "start": {"column": 13, "line": 31}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Killed"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 19, "line": 37}, "start": {"column": 17, "line": 37}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 12, "line": 39}, "start": {"column": 7, "line": 39}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Survived"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 13, "line": 44}, "start": {"column": 5, "line": 44}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 18, "line": 47}, "start": {"column": 16, "line": 47}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_add_to_sub", "location": {"end": {"column": 28, "line": 51}, "start": {"column": 27, "line": 51}}, "mutatorName": "Replaced + with -", "replacement": "-", "status": "Killed"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 35, "line": 51}, "start": {"column": 34, "line": 51}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Survived"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 35, "line": 51}, "start": {"column": 34, "line": 51}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Survived"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 46, "line": 51}, "start": {"column": 43, "line": 51}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Killed"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 22, "line": 53}, "start": {"column": 21, "line": 53}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Killed"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 22, "line": 53}, "start": {"column": 21, "line": 53}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Survived"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 16, "line": 55}, "start": {"column": 11, "line": 55}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Killed"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 21, "line": 60}, "start": {"column": 19, "line": 60}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Killed"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 14, "line": 62}, "start": {"column": 9, "line": 62}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Killed"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 15, "line": 67}, "start": {"column": 7, "line": 67}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Survived"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 20, "line": 92}, "start": {"column": 19, "line": 92}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Survived"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 20, "line": 92}, "start": {"column": 19, "line": 92}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Survived"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 32, "line": 92}, "start": {"column": 28, "line": 92}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Survived"}], "source": "// https://bit.ly/2rcvXK5\r\n#include  <stdio.h>  \r\n#include <stdlib.h>\r\n \r\nint cycleSort(int * list, size_t l_len);\r\nvoid show_array(int * array, size_t a_len);\r\n /*\r\n * Sort an array in place and return the number of writes.\r\n */\r\nint cycleSort(int * list, size_t l_len)\r\n{\r\n  int cycleStart, writes = 0;\r\n \r\n  /* Loop through the array to find cycles to rotate. */\r\n  for (cycleStart = 0; cycleStart < l_len - 1; ++cycleStart)\r\n  {\r\n    int item = list[cycleStart];\r\n    int swap_tmp, i;\r\n \r\n    /* Find where to put the item. */\r\n    int pos = cycleStart;\r\n    for (i = cycleStart + 1; i < l_len; ++i)\r\n    {\r\n      if (list[i] < item)\r\n      {\r\n        ++pos;\r\n      }\r\n    }\r\n \r\n    /* If the item is already there, this is not a cycle. */\r\n    if (pos == cycleStart)\r\n    {\r\n      continue;\r\n    }\r\n \r\n    /* Otherwise, put the item there or right after any duplicates. */\r\n    while (item == list[pos])\r\n    {\r\n      ++pos;\r\n    }\r\n    swap_tmp = list[pos];\r\n    list[pos] = item;\r\n    item = swap_tmp;\r\n    ++writes;\r\n \r\n    /* Rotate the rest of the cycle. */\r\n    while (pos != cycleStart)\r\n    {\r\n      /* Find where to put the item. */\r\n      pos = cycleStart;\r\n      for (i = cycleStart + 1; i < l_len; ++i)\r\n      {\r\n        if (list[i] < item)\r\n        {\r\n          ++pos;\r\n        }\r\n      }\r\n \r\n      /* Put the item there or right after any duplicates. */\r\n      while (item == list[pos])\r\n      {\r\n        ++pos;\r\n      }\r\n      swap_tmp = list[pos];\r\n      list[pos] = item;\r\n      item = swap_tmp;\r\n      ++writes;\r\n    }\r\n  }\r\n \r\n  return writes;\r\n}\r\n \r\nint main(int argc, char ** argv)\r\n{\r\n  int arr[] = { 0, 1, 2, 2, 2, 2, 1, 9, 3, 5, 5, 8, 4, 7, 0, 6, };\r\n  int arr_k = sizeof(arr) / sizeof(arr[0]);\r\n  int writes, i;\r\n  printf(\"Original Array:\\n\");\r\n  show_array(arr, arr_k);\r\n  writes = cycleSort(arr, arr_k);\r\n  printf(\"\\nSorted Array:\\n\");\r\n  show_array(arr, arr_k);\r\n  printf(\"writes: %d\\n\", writes);\r\n \r\n  return 0;\r\n}\r\n\r\nvoid show_array(int * array, size_t a_len)\r\n{\r\n  int ix;\r\n  for (ix = 0; ix < a_len; ++ix)\r\n  {\r\n    printf(\"%d \", array[ix]);\r\n  }\r\n  putchar('\\n');\r\n \r\n  return;\r\n}\r\n"}}, "framework": {"brandingInformation": {"homepageUrl": "https://github.com/mull-project/mull"}, "name": "Mull", "version": "0.17.1, LLVM 12.0.0"}, "mutationScore": 41, "schemaVersion": "1.7", "thresholds": {"high": 80, "low": 60}}