{"config": {"Build Date": "17 Mar 2022", "Commit": "ac98382", "LLVM Version": "12.0.0", "Mull Version": "0.17.1", "URL": "https://github.com/mull-project/mull"}, "files": {"/home/tpugh_/tue/part_two/RecursiveSelectionSort/RecursiveSelectionSort.c": {"language": "cpp", "mutants": [{"id": "cxx_lt_to_ge", "location": {"end": {"column": 11, "line": 8}, "start": {"column": 10, "line": 8}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Killed"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 11, "line": 8}, "start": {"column": 10, "line": 8}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Killed"}, {"id": "cxx_add_to_sub", "location": {"end": {"column": 20, "line": 12}, "start": {"column": 19, "line": 12}}, "mutatorName": "Replaced + with -", "replacement": "-", "status": "Killed"}, {"id": "cxx_le_to_gt", "location": {"end": {"column": 28, "line": 12}, "start": {"column": 26, "line": 12}}, "mutatorName": "Replaced <= with >", "replacement": ">", "status": "Killed"}, {"id": "cxx_le_to_lt", "location": {"end": {"column": 28, "line": 12}, "start": {"column": 26, "line": 12}}, "mutatorName": "Replaced <= with <", "replacement": "<", "status": "Killed"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 38, "line": 12}, "start": {"column": 36, "line": 12}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Killed"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 20, "line": 14}, "start": {"column": 19, "line": 14}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Killed"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 20, "line": 14}, "start": {"column": 19, "line": 14}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Killed"}, {"id": "cxx_add_to_sub", "location": {"end": {"column": 22, "line": 26}, "start": {"column": 21, "line": 26}}, "mutatorName": "Replaced + with -", "replacement": "-", "status": "Killed"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 20, "line": 35}, "start": {"column": 19, "line": 35}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Killed"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 20, "line": 35}, "start": {"column": 19, "line": 35}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Killed"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 30, "line": 35}, "start": {"column": 28, "line": 35}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Killed"}, {"id": "cxx_sub_to_add", "location": {"end": {"column": 9, "line": 36}, "start": {"column": 8, "line": 36}}, "mutatorName": "Replaced - with +", "replacement": "+", "status": "Killed"}, {"id": "cxx_sub_to_add", "location": {"end": {"column": 22, "line": 39}, "start": {"column": 21, "line": 39}}, "mutatorName": "Replaced - with +", "replacement": "+", "status": "Killed"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 20, "line": 42}, "start": {"column": 19, "line": 42}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Killed"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 20, "line": 42}, "start": {"column": 19, "line": 42}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Killed"}, {"id": "cxx_sub_to_add", "location": {"end": {"column": 26, "line": 42}, "start": {"column": 25, "line": 42}}, "mutatorName": "Replaced - with +", "replacement": "+", "status": "Killed"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 32, "line": 42}, "start": {"column": 30, "line": 42}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Killed"}], "source": "#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\r\nvoid sort(double *list, int low, int high) {\r\nint min, indexOfMin, i;\r\n\r\n\tif (low < high) {\r\n\t    /* Find the smallest number and its index in list(low .. high)*/\r\n\t    min = list[low];\r\n\t    indexOfMin = low;\r\n\t    for (i = low + 1; i <= high; i++) \r\n\t    {\r\n\t\t    if (list[i] < min) \r\n\t\t    {\r\n\t\t\t    min = list[i];\r\n\t\t\t    indexOfMin = i;\r\n\t\t    }\r\n\t    }\r\n\t\r\n\t    /* Swap the smallest in list(low .. high) with list(low)*/\r\n\t    list[indexOfMin] = list[low];\r\n\t    list[low] = min;\r\n\t\r\n\t    /* Sort the remaining list(low+1 .. high)*/\r\n\t    sort(list, low + 1, high);\r\n\t}\r\n  }\r\n\r\ndouble list[100];\r\n\r\nvoid main(int argc, char *argv[]) {\r\nint i;\r\n\r\n    for (i = 1; i < argc; i++)\r\n\tlist[i-1] = atof(argv[i]);\r\n\t\r\n\r\n    sort(list, 0, i - 2);\r\n\r\n    printf(\"******** Sorted numbers: \\n\");\r\n    for (i = 0; i < argc-1; i++)\r\n\t  printf(\"%.lf \",list[i]);\r\n    printf(\"\\n\");\r\n  }\r\n\r\n"}}, "framework": {"brandingInformation": {"homepageUrl": "https://github.com/mull-project/mull"}, "name": "Mull", "version": "0.17.1, LLVM 12.0.0"}, "mutationScore": 100, "schemaVersion": "1.7", "thresholds": {"high": 80, "low": 60}}