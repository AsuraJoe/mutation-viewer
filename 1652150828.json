{"config": {"Build Date": "17 Mar 2022", "Commit": "ac98382", "LLVM Version": "12.0.0", "Mull Version": "0.17.1", "URL": "https://github.com/mull-project/mull"}, "files": {"/home/tpugh_/tue/part_two/InversePermutation/InversePermutation.c": {"language": "cpp", "mutants": [{"id": "cxx_lt_to_ge", "location": {"end": {"column": 22, "line": 22}, "start": {"column": 21, "line": 22}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Killed"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 22, "line": 22}, "start": {"column": 21, "line": 22}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Killed"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 29, "line": 22}, "start": {"column": 27, "line": 22}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Killed"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 20, "line": 23}, "start": {"column": 19, "line": 23}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Killed"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 20, "line": 23}, "start": {"column": 19, "line": 23}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Killed"}, {"id": "cxx_ge_to_gt", "location": {"end": {"column": 33, "line": 23}, "start": {"column": 31, "line": 23}}, "mutatorName": "Replaced >= with >", "replacement": ">", "status": "Killed"}, {"id": "cxx_ge_to_lt", "location": {"end": {"column": 33, "line": 23}, "start": {"column": 31, "line": 23}}, "mutatorName": "Replaced >= with <", "replacement": "<", "status": "Killed"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 22, "line": 32}, "start": {"column": 21, "line": 32}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Killed"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 22, "line": 32}, "start": {"column": 21, "line": 32}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Killed"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 29, "line": 32}, "start": {"column": 27, "line": 32}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Killed"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 22, "line": 37}, "start": {"column": 21, "line": 37}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Killed"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 22, "line": 37}, "start": {"column": 21, "line": 37}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Killed"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 29, "line": 37}, "start": {"column": 27, "line": 37}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Killed"}, {"id": "cxx_sub_to_add", "location": {"end": {"column": 21, "line": 45}, "start": {"column": 20, "line": 45}}, "mutatorName": "Replaced - with +", "replacement": "+", "status": "Killed"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 22, "line": 48}, "start": {"column": 21, "line": 48}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Killed"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 22, "line": 48}, "start": {"column": 21, "line": 48}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Killed"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 29, "line": 48}, "start": {"column": 27, "line": 48}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Killed"}, {"id": "cxx_add_to_sub", "location": {"end": {"column": 29, "line": 49}, "start": {"column": 28, "line": 49}}, "mutatorName": "Replaced + with -", "replacement": "-", "status": "Killed"}], "source": "\n/*************************************************************************\n *  Compilation:  javac InversePermutation.java\n *  Execution:    java InversePermutation 5 0 2 3 1 4\n *  \n *  Read in a permutation from the command line and print out the inverse\n *  permutation.\n *\n *    % java InversePermutation 5 0 2 3 1 4\n *    2 3 4 5 1 0 \n *\n *************************************************************************/\n\n#include <stdio.h>\n\nint v[100], exists[100], ainv[100];\n\nvoid invert(int a[], int N)\n{      // check if valid\nint i;\n\n      for (i = 0; i < N; i++) {\n         if (a[i] < 0 || a[i] >= N || exists[a[i]])\n         {\n             printf(\"Input is not a permutation.\\n\");\n             return;\n         }\n         exists[a[i]] = 1;\n      }\n\n      // invert\n      for (i = 0; i < N; i++)\n         ainv[a[i]] = i;\n\n\n      // print out\n      for (i = 0; i < N; i++)\n         printf(\"%d \", ainv[i]);\n      printf(\"\\n\");\n}\n\n\nvoid main(int argc, char *argv[]) { \n\n      int N = argc - 1, i;\n\n      // read in permutation\n      for (i = 0; i < N; i++)\n         v[i] = atoi(argv[i+1]);\n      invert(v, N);\n}\n"}}, "framework": {"brandingInformation": {"homepageUrl": "https://github.com/mull-project/mull"}, "name": "Mull", "version": "0.17.1, LLVM 12.0.0"}, "mutationScore": 100, "schemaVersion": "1.7", "thresholds": {"high": 80, "low": 60}}